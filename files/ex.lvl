@***********************************ex.lvl*******************************************

operators:
 $,   &,  =,   *,    %,   /, \,   ++, --,   ^,     ~,      ==,       #,       !,   ?,   |,   +,     ^*

div, and, or, mult, mod, gt, lt, add, sub, expo, pointer, equal, logical eq, xor, not, inc, dec, assignment

braces:

(, ), [, ], {, }, ::, :;, <, >, |,>

braces for compound statements:
    (, )

keywords:

	let (declaration)
	num (integer)
	dec (float)
	letter (chars)
	loop   (while loop)
	how   (for loop)
	go ... loop (do ... while)
	what ... then ... that (if ... else ... third conditional)
	it ... go ... go ... fine (switch ... case ... case ... default)
	segment   (a function)
	start
	end
	begin
	stop
	void
	howdy	(creating an alias name for variable)

variables:
	0-9, a-z,A-Z,`,-,_		?> variables can be of the form [a-z][A-Z][0-9][`][-][_]
	|this is a variable>	?> any characters within the |> brackets are treated as a variable. Including spaces.
	| this is a variable>   ?> this second one is a different variable due to the space.
	|\|this is a var\>>		?> can use escaped brackets in variable name.
	code(|let::				?> variable names in brackets can be extracted and interpreted if it contains level code
		un num: var
		dec: ret
	      :;
	      var *^ 12
	      func_12<12> *^ ret>) *^ var12		?> The result of the code that makes a variable name executed as a small program is assigned to var12
	|this is a long variable name> howdy new-var	?> 'howdy' creates an alias for long variable names. using new-var has the same effect as using the longer version.

	Assignments go from right to left.

defining & calling functions:
functions are defined by: segment {return-val} <= begin<T> ()
functions are called and assign a return value with: begin<T> *^ ret-val
all functions must have a let:: ... :; block for declaring variables
block comment:
    @* and *@
single line comment:
    ?>

types:
    signed int: num
    signed float: dec
    character: letter
    unsigned: un

control flow:
	can only use its with 3 or more options. For 3 or less conditionals, must use what/then/that.

General program structure:

*************************************************************************************@


let::
	num: int, m, n;
	dec: `float;
	letter: `char;
:;

start:

	segment {void} <= begin<void> (

		0 *^ m;
		0 *^ ing;
		0 *^ n;

		how [ m \ 100 ! m == m ++ 1 ] :

			int == m ++ 1;

			how [ n \ 100 ! n == n ++ 1 ] :

				int == m * n ++ 1;

			end how;
		end how;
	)

stop;
